package com.surgeplay.glow;

import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL12.*;
import static org.lwjgl.opengl.GL13.*;
import static org.lwjgl.opengl.GL14.*;
import static org.lwjgl.opengl.GL15.*;
import static org.lwjgl.opengl.GL20.*;
import static org.lwjgl.opengl.GL21.*;
import static org.lwjgl.opengl.ARBComputeShader.*;
import static org.lwjgl.opengl.GLCapabilities.*;
import static org.lwjgl.opengl.ARBShaderAtomicCounters.*;
import static org.lwjgl.opengl.GL30.*;
import static org.lwjgl.opengl.GL31.*;
import static org.lwjgl.opengl.GL32.*;
import static org.lwjgl.opengl.GL33.*;
import static org.lwjgl.opengl.GL43.*;

import java.util.HashMap;
import java.util.Map;

import org.lwjgl.opengl.ARBShaderAtomicCounters;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GL32;
import org.lwjgl.opengl.GL43;

/**
 * Values in this enum correspond to GL_EnumName constants in GL.
 */
public enum GLLimit {
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS		(GL43.GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS),
	MAX_COMBINED_SHADER_STORAGE_BLOCKS		(GL43.GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS),
	MAX_COMPUTE_UNIFORM_BLOCKS				(GL43.GL_MAX_COMPUTE_UNIFORM_BLOCKS),
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS			(GL43.GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS),
	MAX_COMPUTE_UNIFORM_COMPONENTS			(GL43.GL_MAX_COMPUTE_UNIFORM_COMPONENTS),
	MAX_COMPUTE_ATOMIC_COUNTERS				(GL43.GL_MAX_COMPUTE_ATOMIC_COUNTERS),
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS		(GL43.GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS),
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	(GL43.GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS),
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS		(GL43.GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS),
	MAX_DEBUG_GROUP_STACK_DEPTH				(GL43.GL_MAX_DEBUG_GROUP_STACK_DEPTH),
	/** Only a rough estimate- use a GL_PROXY_TEXTURE_3D dry-run to determine if a specific texture size would be too big. */
	MAX_3D_TEXTURE_SIZE						(GL12.GL_MAX_3D_TEXTURE_SIZE),
	MAX_ARRAY_TEXTURE_LAYERS				(GL30.GL_MAX_ARRAY_TEXTURE_LAYERS),
	MAX_CLIP_DISTANCES						(GL30.GL_MAX_CLIP_DISTANCES),
	MAX_COLOR_TEXTURE_SAMPLES				(GL32.GL_MAX_COLOR_TEXTURE_SAMPLES),
	MAX_COMBINED_ATOMIC_COUNTERS			(ARBShaderAtomicCounters.GL_MAX_COMBINED_ATOMIC_COUNTERS),
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
	MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS,
	MAX_COMBINED_TEXTURE_IMAGE_UNITS,
	MAX_COMBINED_UNIFORM_BLOCKS,
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
	MAX_CUBE_MAP_TEXTURE_SIZE,
	MAX_DEPTH_TEXTURE_SAMPLES,
	MAX_DRAW_BUFFERS,
	MAX_DUAL_SOURCE_DRAW_BUFFERS,
	MAX_ELEMENTS_INDICES,
	MAX_ELEMENTS_VERTICES,
	MAX_FRAGMENT_ATOMIC_COUNTERS,
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS,
	MAX_FRAGMENT_INPUT_COMPONENTS,
	MAX_FRAGMENT_UNIFORM_COMPONENTS,
	MAX_FRAGMENT_UNIFORM_BLOCKS,
	MAX_FRAMEBUFFER_WIDTH,
	MAX_FRAMEBUFFER_HEIGHT,
	MAX_FRAMEBUFFER_LAYERS,
	MAX_FRAMEBUFFER_SAMPLES,
	MAX_GEOMETRY_ATOMIC_COUNTERS,
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS,
	MAX_GEOMETRY_INPUT_COMPONENTS,
	MAX_GEOMETRY_OUTPUT_COMPONENTS,
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS,
	MAX_GEOMETRY_UNIFORM_BLOCKS,
	MAX_GEOMETRY_UNIFORM_COMPONENTS,
	MAX_INTEGER_SAMPLES,
	MIN_MAP_BUFFER_ALIGNMENT,
	MAX_LABEL_LENGTH,
	MAX_PROGRAM_TEXEL_OFFSET,
	MIN_PROGRAM_TEXEL_OFFSET,
	MAX_RECTANGLE_TEXTURE_SIZE,
	MAX_RENDERBUFFER_SIZE,
	MAX_SAMPLE_MASK_WORDS,
	MAX_SERVER_WAIT_TIMEOUT,
	MAX_SHADER_STORAGE_BUFFER_BINDINGS,
	MAX_TESS_CONTROL_ATOMIC_COUNTERS,
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS,
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS,
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS,
	MAX_TEXTURE_BUFFER_SIZE,
	MAX_TEXTURE_IMAGE_UNITS,
	MAX_TEXTURE_LOD_BIAS,
	MAX_TEXTURE_SIZE,
	MAX_UNIFORM_BUFFER_BINDINGS,
	MAX_UNIFORM_BLOCK_SIZE,
	MAX_UNIFORM_LOCATIONS,
	MAX_VARYING_COMPONENTS,
	MAX_VARYING_VECTORS,
	MAX_VARYING_FLOATS,
	MAX_VERTEX_ATOMIC_COUNTERS,
	MAX_VERTEX_ATTRIBS,
	MAX_VERTEX_SHADER_STORAGE_BLOCKS,
	MAX_VERTEX_TEXTURE_IMAGE_UNITS,
	MAX_VERTEX_UNIFORM_COMPONENTS,
	MAX_VERTEX_UNIFORM_VECTORS,
	MAX_VERTEX_OUTPUT_COMPONENTS,
	MAX_VERTEX_UNIFORM_BLOCKS,
	MAX_VIEWPORT_WIDTH, //half of MAX_VIEWPORT_DIMS
	MAX_VIEWPORT_HEIGHT,//half of MAX_VIEWPORT_DIMS
	MAX_VIEWPORTS,
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET,
	MAX_VERTEX_ATTRIB_BINDINGS,
	MAX_ELEMENT_INDEX,
	;
	
	private final int glConstant;
	private boolean memoized = false;
	private int result = -1;
	
	GLLimit() { glConstant = GL11.GL_FALSE; }
	GLLimit(int glConstant) {
		this.glConstant = glConstant;
	}
	
	public int value() { return glConstant; }
	
	public int get() {
		if (!memoized) {
			result = GL11.glGetInteger(glConstant);
			memoized = true;
		}
		return result;
	}
	
	public static void forgetEverything() {
		for(GLLimit limit : values()) limit.memoized = false;
	}
	
	public static Map<GLLimit, Integer> all() {
		HashMap<GLLimit, Integer> result = new HashMap<>();
		for(GLLimit limit : values()) {
			if(limit.glConstant==GL11.GL_FALSE) continue;
			result.put(limit, limit.get());
		}
		return result;
	}
}
